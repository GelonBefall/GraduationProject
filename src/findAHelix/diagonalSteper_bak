# from src.doMat.matrixMaker import makeMatrix
# from src.funcs.pngMaker import makePNG
# from src.funcs.listModer import listMode


# class diaStep:
    # def __init__(self, pdbID: str, overWrite=False):
        # '''遍历矩阵中平行对角线的所有斜线上的Cα原子坐标。'''
        # sample
        # mkPNG = makePNG()
        # mM = makeMatrix(self.pdbID)
        # dR=readDSSP(pdbID)
        # self.pickle = pickleOP()
        # self.clrMat = mE.mkMat.grayMatrix(self.disMatrix, self.clrMaps)
        # self.residuesCount=mM.residuesCount()


    # def stepClrDiaLine(self, step: int, choosenAreas):
        # '''遍历rgb矩阵'''
    #     choosenArea = deque()
    #     print(choosenAreas)
    #     for area in choosenAreas:
    #         if 4 <= area[1]-area[0] < step:
    #             choosenArea.append(area)
    #             continue
    #         areaTemp = []
    #         temp = None
    #         for col in range(area[0], area[1]-step):
    #             # 遍历该step线, 连续四个以上距离相同的残基添加入同一组中，作为α螺旋候选。
    #             row = col+step

    #             if len(areaTemp) == 0:
    #                 temp = self.clrMat[col][row]
    #                 areaTemp.append(col)

    #             elif len(areaTemp) == 1:
    #                 if all(temp == self.clrMat[col][row]):
    #                     areaTemp.append(col)
    #                 else:
    #                     areaTemp[0] = col
    #                     temp = self.clrMat[col][row]

    #             elif 1 <= (areaTemp[1]-areaTemp[0]) < 4:
    #                 if all(temp == self.clrMat[col][row]):
    #                     areaTemp[1] = col
    #                 else:
    #                     areaTemp.clear()
    #                     temp = self.clrMat[col][row]
    #                     areaTemp.append(col)
    #             else:
    #                 if all(temp == self.clrMat[col][row]):
    #                     areaTemp[1] = row
    #                 else:
    #                     areaTemp[1] += 1
    #                     choosenArea.append(areaTemp)
    #                     areaTemp = []
    #                     temp = self.clrMat[col][col+step]
    #                     areaTemp.append(col)
    #         if (len(areaTemp) == 2) and ((areaTemp[1]-areaTemp[0]) >= 4):
    #             areaTemp[1] += 1
    #             choosenArea.append(areaTemp)
    #             areaTemp = []

    #     choosenArea = list(choosenArea)
    #     return choosenArea

    # def stepClrDiaLines(self):
        # pickleName = self.pdbID+"_DiaLines"
        # try:
        #     diaLines = self.pickle.loadPickle(pickleName)
        #     return diaLines
        # except:
        # choosenAreas = [[0, self.CAAmount]]
        # for step in self.steps:
        #     if step >= 40:
        #         break
        #     choosenAreas = self.stepClrDiaLine(step, choosenAreas)

        # self.pickle.savePickle(diaLines, pickleName)
        # return choosenAreas

    # def clrAHelixDiaLine(self, step: int):
    #     # diaLine={}
    #     lineTmp = deque()
    #     for row in range(self.CAAmount-step):
    #         col = step+row
    #         lineTmp.append(self.clrMat[row][col])

    #     diaLine = numpy.array((lineTmp))
    #     # return len(diaLine[step])
    #     return diaLine